import { IToken } from "../helpers/tokens";
import { ethers, utils } from "ethers";
import { IAllBondData } from "../hooks/bonds";
import { getAddresses, Networks } from "../constants";
import axios from "axios";
import { TraderZapinContract } from "../abi";
import { BigNumber } from "ethers";

export const zapinLpData = async (bond: IAllBondData, token: IToken, tokenAmmount: string, network: Networks, slippage: number) => {
    const addresses = getAddresses(network);

    const sellToken = token.isAvax ? ethers.constants.AddressZero : token.address;
    const buyToken = bond.getAddressForReserve(network);

    // const url = `https://api.zapper.fi/v1/zap-in/pool/pancakeswap/transaction?gasPrice=1000000000000&ownerAddress=${addresses.ZAPIN_ADDRESS}&sellAmount=${tokenAmmount}&sellTokenAddress=${sellToken}&poolAddress=${buyToken}&slippagePercentage=${slippage}&network=binance-smart-chain&api_key=96e0cc51-a62e-42ca-acee-910ea7d2a241&skipGasEstimate=true`;

    // const { data } = await axios.get(url);

    const data = {
        to: "0x8308a1A404dB3cB3075618B1651671bC4E15F9d5",
        from: "0x9ABE63C5A2fBcd54c8bAec3553d326356a530cae",
        data: "0xdb254e50000000000000000000000000264c1383ea520f73dd837f915ef3a732e204a493000000000000000000000000113f413371fc4cc4c9d6416cf1de9dfd7bf747df00000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000000000105000000000000000000000000def1c0ded9bec7f1a1670819833240f027b25eff00000000000000000000000000000000000000000000000000000000000001000000000000000000000000003ce37278de6388532c3949ce4e886f365b14fb56000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000005e8415565b0000000000000000000000000264c1383ea520f73dd837f915ef3a732e204a493000000000000000000000000130966628846bfd36ff31a822705796e8cb8c18d00000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000014be509400000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000000070000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000264c1383ea520f73dd837f915ef3a732e204a493000000000000000000000000130966628846bfd36ff31a822705796e8cb8c18d000000000000000000000000000000000000000000000000000000000000012000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000f4240000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000025472616465724a6f650000000000000000000000000000000000000000000000000000000000000000000000000f42400000000000000000000000000000000000000000000000000000000014be5094000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000060ae616a2155ee3d9a68541ba4544862310933d400000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000002000000000000000000000000264c1383ea520f73dd837f915ef3a732e204a493000000000000000000000000130966628846bfd36ff31a822705796e8cb8c18d000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000e00000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000002000000000000000000000000264c1383ea520f73dd837f915ef3a732e204a493000000000000000000000000eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee0000000000000000000000000000000000000000000000000000000000000000869584cd000000000000000000000000f4e386b070a18419b5d3af56699f8a438dd18e8900000000000000000000000000000000000000000000009d337e549161f40d1c000000000000000000000000000000000000000000000000",
        value: "0",
        sellTokenAddress: "0x264c1383EA520f73dd837F915ef3a732e204a493",
        sellTokenAmount: "1000000",
        buyTokenAddress: "0x113f413371fc4cc4c9d6416cf1de9dfd7bf747df",
        minTokens: "261",
        gasPrice: "1000000000000",
        gas: "0",
    };

    const zapinInterface = new utils.Interface(TraderZapinContract);

    const { _swapTarget, swapData } = zapinInterface.decodeFunctionData("ZapIn", data.data);

    return [_swapTarget, swapData, data.minTokens];
};

export const zapinData = async (bond: IAllBondData, token: IToken, tokenAmmount: string, network: Networks, slippage: number) => {
    const sellToken = token.isAvax ? "0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee" : token.address;
    const buyToken = bond.getAddressForReserve(network);

    const url = `https://avalanche.api.0x.org/swap/v1/quote?buyToken=${buyToken}&includePriceComparisons=true&intentOnFilling=true&sellAmount=${tokenAmmount}&sellToken=${sellToken}&skipValidation=true&slippagePercentage=${slippage}`;
    const { data } = await axios.get(url);

    const dataBuyAmount = BigNumber.from(data.buyAmount);
    const buyAmount = dataBuyAmount.sub(dataBuyAmount.mul(slippage * 1000).div(1000));

    return [data.to, data.data, buyAmount.toString()];
};
